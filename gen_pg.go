// Package main contains the types for schema 'ms'.
package main

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
)

// Activity represents a row from 'ms.activity'.
type Activity struct {
	Id           int64 `json:"Id"`           // Id
	ActorUserId  int   `json:"ActorUserId"`  // ActorUserId
	ActionTypeId int   `json:"ActionTypeId"` // ActionTypeId
	TargetId     int   `json:"TargetId"`     // TargetId
	RefId        int64 `json:"RefId"`        // RefId
	CreatedAt    int   `json:"CreatedAt"`    // CreatedAt
}

// Comment represents a row from 'ms.comments'.
type Comment struct {
	Id          int    `json:"Id"`          // Id
	UserId      int    `json:"UserId"`      // UserId
	PostId      int    `json:"PostId"`      // PostId
	Text        string `json:"Text"`        // Text
	CreatedTime int    `json:"CreatedTime"` // CreatedTime
}

// FollowingList represents a row from 'ms.following_list'.
type FollowingList struct {
	Id          int    `json:"Id"`          // Id
	UserId      int    `json:"UserId"`      // UserId
	ListType    int    `json:"ListType"`    // ListType
	Name        string `json:"Name"`        // Name
	Count       int    `json:"Count"`       // Count
	IsAuto      int16  `json:"IsAuto"`      // IsAuto
	IsPimiry    int16  `json:"IsPimiry"`    // IsPimiry
	CreatedTime int    `json:"CreatedTime"` // CreatedTime
}

// FollowingListMember represents a row from 'ms.following_list_member'.
type FollowingListMember struct {
	Id             int64 `json:"Id"`             // Id
	ListId         int   `json:"ListId"`         // ListId
	UserId         int   `json:"UserId"`         // UserId
	FollowedUserId int   `json:"FollowedUserId"` // FollowedUserId
	FollowType     int16 `json:"FollowType"`     // FollowType
	UpdatedTimeMs  int64 `json:"UpdatedTimeMs"`  // UpdatedTimeMs
}

// FollowingListMemberHistory represents a row from 'ms.following_list_member_history'.
type FollowingListMemberHistory struct {
	Id             int64 `json:"Id"`             // Id
	ListId         int   `json:"ListId"`         // ListId
	UserId         int   `json:"UserId"`         // UserId
	FollowedUserId int   `json:"FollowedUserId"` // FollowedUserId
	FollowType     int16 `json:"FollowType"`     // FollowType
	UpdatedTimeMs  int64 `json:"UpdatedTimeMs"`  // UpdatedTimeMs
	FollowId       int   `json:"FollowId"`       // FollowId
}

// Like represents a row from 'ms.likes'.
type Like struct {
	Id          int   `json:"Id"`          // Id
	PostId      int   `json:"PostId"`      // PostId
	UserId      int   `json:"UserId"`      // UserId
	TypeId      int16 `json:"TypeId"`      // TypeId
	CreatedTime int   `json:"CreatedTime"` // CreatedTime
}

// Media represents a row from 'ms.media'.
type Media struct {
	Id          int    `json:"Id"`          // Id
	UserId      int    `json:"UserId"`      // UserId
	PostId      int    `json:"PostId"`      // PostId
	AlbumId     int    `json:"AlbumId"`     // AlbumId
	TypeId      int16  `json:"TypeId"`      // TypeId
	CreatedTime int    `json:"CreatedTime"` // CreatedTime
	Src         string `json:"Src"`         // Src
}

// Message represents a row from 'ms.message'.
type Message struct {
	Id         int64  `json:"Id"`         // Id
	ToUserId   int    `json:"ToUserId"`   // ToUserId
	RoomKey    string `json:"RoomKey"`    // RoomKey
	MessageKey string `json:"MessageKey"` // MessageKey
	FromUserID int    `json:"FromUserID"` // FromUserID
	Data       string `json:"Data"`       // Data
	TimeMs     int64  `json:"TimeMs"`     // TimeMs
}

// MsgDeletedFromServer represents a row from 'ms.msg_deleted_from_server'.
type MsgDeletedFromServer struct {
	Id         int64  `json:"Id"`         // Id
	ToUserId   int    `json:"ToUserId"`   // ToUserId
	MsgKey     string `json:"MsgKey"`     // MsgKey
	PeerUserId int    `json:"PeerUserId"` // PeerUserId
	RoomKey    string `json:"RoomKey"`    // RoomKey
	AtTime     int    `json:"AtTime"`     // AtTime
}

// MsgReceivedToPeer represents a row from 'ms.msg_received_to_peer'.
type MsgReceivedToPeer struct {
	Id         int64  `json:"Id"`         // Id
	ToUserId   int    `json:"ToUserId"`   // ToUserId
	MsgKey     string `json:"MsgKey"`     // MsgKey
	RoomKey    string `json:"RoomKey"`    // RoomKey
	PeerUserId int    `json:"PeerUserId"` // PeerUserId
	AtTime     int    `json:"AtTime"`     // AtTime
}

// MsgSeenByPeer represents a row from 'ms.msg_seen_by_peer'.
type MsgSeenByPeer struct {
	Id         int64  `json:"Id"`         // Id
	ToUserId   int    `json:"ToUserId"`   // ToUserId
	MsgKey     string `json:"MsgKey"`     // MsgKey
	RoomKey    string `json:"RoomKey"`    // RoomKey
	PeerUserId int    `json:"PeerUserId"` // PeerUserId
	AtTime     int    `json:"AtTime"`     // AtTime
}

// Notification represents a row from 'ms.notification'.
type Notification struct {
	Id           int `json:"Id"`           // Id
	ForUserId    int `json:"ForUserId"`    // ForUserId
	ActorUserId  int `json:"ActorUserId"`  // ActorUserId
	ActionTypeId int `json:"ActionTypeId"` // ActionTypeId
	ObjectTypeId int `json:"ObjectTypeId"` // ObjectTypeId
	TargetId     int `json:"TargetId"`     // TargetId
	ObjectId     int `json:"ObjectId"`     // ObjectId
	SeenStatus   int `json:"SeenStatus"`   // SeenStatus
	CreatedTime  int `json:"CreatedTime"`  // CreatedTime
}

// NotificationRemoved represents a row from 'ms.notification_removed'.
type NotificationRemoved struct {
	NotificationId int `json:"NotificationId"` // NotificationId
	ForUserId      int `json:"ForUserId"`      // ForUserId
}

// PhoneContact represents a row from 'ms.phone_contacts'.
type PhoneContact struct {
	Id                    int    `json:"Id"`                    // Id
	PhoneDisplayName      string `json:"PhoneDisplayName"`      // PhoneDisplayName
	PhoneFamilyName       string `json:"PhoneFamilyName"`       // PhoneFamilyName
	PhoneNumber           string `json:"PhoneNumber"`           // PhoneNumber
	PhoneNormalizedNumber string `json:"PhoneNormalizedNumber"` // PhoneNormalizedNumber
	PhoneContactRowId     int    `json:"PhoneContactRowId"`     // PhoneContactRowId
	UserId                int    `json:"UserId"`                // UserId
	DeviceUuidId          int    `json:"DeviceUuidId"`          // DeviceUuidId
	CreatedTime           int    `json:"CreatedTime"`           // CreatedTime
	UpdatedTime           int    `json:"UpdatedTime"`           // UpdatedTime
}

// Post represents a row from 'ms.post'.
type Post struct {
	Id            int    `json:"Id"`            // Id
	UserId        int    `json:"UserId"`        // UserId
	TypeId        int    `json:"TypeId"`        // TypeId
	Text          string `json:"Text"`          // Text
	FormatedText  string `json:"FormatedText"`  // FormatedText
	MediaUrl      string `json:"MediaUrl"`      // MediaUrl
	MediaServerId int    `json:"MediaServerId"` // MediaServerId
	Width         int    `json:"Width"`         // Width
	Height        int    `json:"Height"`        // Height
	SharedTo      int    `json:"SharedTo"`      // SharedTo
	HasTag        int    `json:"HasTag"`        // HasTag
	LikesCount    int    `json:"LikesCount"`    // LikesCount
	CommentsCount int    `json:"CommentsCount"` // CommentsCount
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime
}

// RecommendUser represents a row from 'ms.recommend_user'.
type RecommendUser struct {
	Id          int     `json:"Id"`          // Id
	UserId      int     `json:"UserId"`      // UserId
	TargetId    int     `json:"TargetId"`    // TargetId
	Weight      float32 `json:"Weight"`      // Weight
	CreatedTime int     `json:"CreatedTime"` // CreatedTime
}

// SearchClicked represents a row from 'ms.search_clicked'.
type SearchClicked struct {
	Id        int64  `json:"Id"`        // Id
	Query     string `json:"Query"`     // Query
	ClickType int    `json:"ClickType"` // ClickType
	TargetId  int    `json:"TargetId"`  // TargetId
	UserId    int    `json:"UserId"`    // UserId
	CreatedAt int    `json:"CreatedAt"` // CreatedAt
}

// Session represents a row from 'ms.session'.
type Session struct {
	Id                 int    `json:"Id"`                 // Id
	UserId             int    `json:"UserId"`             // UserId
	SessionUuid        string `json:"SessionUuid"`        // SessionUuid
	ClientUuid         string `json:"ClientUuid"`         // ClientUuid
	DeviceUuid         string `json:"DeviceUuid"`         // DeviceUuid
	LastActivityTime   int    `json:"LastActivityTime"`   // LastActivityTime
	LastIpAddress      string `json:"LastIpAddress"`      // LastIpAddress
	LastWifiMacAddress string `json:"LastWifiMacAddress"` // LastWifiMacAddress
	LastNetworkType    string `json:"LastNetworkType"`    // LastNetworkType
	CreatedTime        int    `json:"CreatedTime"`        // CreatedTime
}

// Tag represents a row from 'ms.tags'.
type Tag struct {
	Id          int    `json:"Id"`          // Id
	Name        string `json:"Name"`        // Name
	Count       int    `json:"Count"`       // Count
	IsBlocked   int    `json:"IsBlocked"`   // IsBlocked
	CreatedTime int    `json:"CreatedTime"` // CreatedTime
}

// TagsPost represents a row from 'ms.tags_posts'.
type TagsPost struct {
	Id          int `json:"Id"`          // Id
	TagId       int `json:"TagId"`       // TagId
	PostId      int `json:"PostId"`      // PostId
	TypeId      int `json:"TypeId"`      // TypeId
	CreatedTime int `json:"CreatedTime"` // CreatedTime
}

// User represents a row from 'ms.user'.
type User struct {
	Id                   int    `json:"Id"`                   // Id
	UserName             string `json:"UserName"`             // UserName
	FirstName            string `json:"FirstName"`            // FirstName
	LastName             string `json:"LastName"`             // LastName
	About                string `json:"About"`                // About
	FullName             string `json:"FullName"`             // FullName
	AvatarUrl            string `json:"AvatarUrl"`            // AvatarUrl
	PrivacyProfile       int16  `json:"PrivacyProfile"`       // PrivacyProfile
	Phone                string `json:"Phone"`                // Phone
	Email                string `json:"Email"`                // Email
	IsDeleted            int    `json:"IsDeleted"`            // IsDeleted
	PasswordHash         string `json:"PasswordHash"`         // PasswordHash
	PasswordSalt         string `json:"PasswordSalt"`         // PasswordSalt
	FollowersCount       int    `json:"FollowersCount"`       // FollowersCount
	FollowingCount       int    `json:"FollowingCount"`       // FollowingCount
	PostsCount           int    `json:"PostsCount"`           // PostsCount
	MediaCount           int    `json:"MediaCount"`           // MediaCount
	LikesCount           int    `json:"LikesCount"`           // LikesCount
	ResharedCount        int    `json:"ResharedCount"`        // ResharedCount
	LastActionTime       int    `json:"LastActionTime"`       // LastActionTime
	LastPostTime         int    `json:"LastPostTime"`         // LastPostTime
	PrimaryFollowingList int    `json:"PrimaryFollowingList"` // PrimaryFollowingList
	CreatedTime          int    `json:"CreatedTime"`          // CreatedTime
	UpdatedTime          int    `json:"UpdatedTime"`          // UpdatedTime
	SessionUuid          string `json:"SessionUuid"`          // SessionUuid
	DeviceUuid           string `json:"DeviceUuid"`           // DeviceUuid
	LastWifiMacAddress   string `json:"LastWifiMacAddress"`   // LastWifiMacAddress
	LastNetworkType      string `json:"LastNetworkType"`      // LastNetworkType
	AppVersion           int    `json:"AppVersion"`           // AppVersion
	LastActivityTime     int    `json:"LastActivityTime"`     // LastActivityTime
	LastLoginTime        int    `json:"LastLoginTime"`        // LastLoginTime
	LastIpAddress        string `json:"LastIpAddress"`        // LastIpAddress
}

// UserMetaInfo represents a row from 'ms.user_meta_info'.
type UserMetaInfo struct {
	UserId              int   `json:"UserId"`              // UserId
	IsNotificationDirty int16 `json:"IsNotificationDirty"` // IsNotificationDirty
}

// UserPassword represents a row from 'ms.user_password'.
type UserPassword struct {
	UserId      int    `json:"UserId"`      // UserId
	Password    string `json:"Password"`    // Password
	CreatedTime int    `json:"CreatedTime"` // CreatedTime
}

// XODB is the common interface for database operations that can be used with
// types from schema 'ms'.
//
// This should work with database/sql.DB and database/sql.Tx.
type XODB interface {
	Exec(string, ...interface{}) (sql.Result, error)
	Query(string, ...interface{}) (*sql.Rows, error)
	QueryRow(string, ...interface{}) *sql.Row
}

// XOLog provides the log func used by generated queries.
var XOLog = func(string, ...interface{}) {}

// ScannerValuer is the common interface for types that implement both the
// database/sql.Scanner and sql/driver.Valuer interfaces.
type ScannerValuer interface {
	sql.Scanner
	driver.Valuer
}

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
}

// Slice is a slice of ScannerValuers.
type Slice []ScannerValuer
